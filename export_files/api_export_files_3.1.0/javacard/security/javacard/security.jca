// converted by version  [v3.1.0]
// on Tue Jul 06 15:18:06 PDT 2021

.package javacard/security {
	.aid 0xA0:0x0:0x0:0x0:0x62:0x1:0x2;
	.version 1.7;

	.imports {
		0xA0:0x0:0x0:0x0:0x62:0x0:0x1 1.0;		//java/lang
		0xA0:0x0:0x0:0x0:0x62:0x1:0x1 1.8;		//javacard/framework
	}

	.constantPool {
		// 0
		instanceFieldRef PublicKey KeyPair/publicKey;
		// 1
		instanceFieldRef PrivateKey KeyPair/privateKey;
		// 2
		instanceFieldRef RandomData RandomData$OneShot/actual;
		// 3
		instanceFieldRef Signature Signature$OneShot/actual;
		// 4
		instanceFieldRef MessageDigest MessageDigest$OneShot/actual;
		// 5
		instanceFieldRef short NamedParameterSpec/name;
		// 6
		instanceFieldRef InitializedMessageDigest InitializedMessageDigest$OneShot/actual;
		// 7
		virtualMethodRef RandomData/generateData([BSS)V;
		// 8
		virtualMethodRef RandomData/nextBytes([BSS)S;
		// 9
		virtualMethodRef RandomData/setSeed([BSS)V;
		// 10
		staticMethodRef 1.5.0(S)V;		// javacard/framework/CardRuntimeException.<init>(S)V
		// 11
		staticFieldRef CryptoException CryptoException/systemInstance;
		// 12
		virtualMethodRef 1.5.2(S)V;		// setReason(S)V
		// 13
		staticMethodRef Signature/<init>()V;
		// 14
		staticMethodRef 0.0.0()V;		// java/lang/Object.<init>()V
		// 15
		virtualMethodRef Signature/init(Ljavacard/security/Key;B)V;
		// 16
		virtualMethodRef Signature/init(Ljavacard/security/Key;B[BSS)V;
		// 17
		virtualMethodRef Signature/setInitialDigest([BSS[BSS)V;
		// 18
		virtualMethodRef Signature/getAlgorithm()B;
		// 19
		virtualMethodRef Signature/getMessageDigestAlgorithm()B;
		// 20
		virtualMethodRef Signature/getCipherAlgorithm()B;
		// 21
		virtualMethodRef Signature/getPaddingAlgorithm()B;
		// 22
		virtualMethodRef Signature/getLength()S;
		// 23
		virtualMethodRef Signature/sign([BSS[BS)S;
		// 24
		virtualMethodRef Signature/signPreComputedHash([BSS[BS)S;
		// 25
		virtualMethodRef Signature/verify([BSS[BSS)Z;
		// 26
		virtualMethodRef Signature/verifyPreComputedHash([BSS[BSS)Z;
		// 27
		staticMethodRef MessageDigest/<init>()V;
		// 28
		staticMethodRef RandomData/<init>()V;
		// 29
		virtualMethodRef MessageDigest/getAlgorithm()B;
		// 30
		virtualMethodRef MessageDigest/getLength()B;
		// 31
		virtualMethodRef MessageDigest/doFinal([BSS[BS)S;
		// 32
		virtualMethodRef MessageDigest/reset()V;
		// 33
		staticMethodRef CryptoException/throwIt(S)V;
		// 34
		staticMethodRef InitializedMessageDigest/<init>()V;
		// 35
		virtualMethodRef RandomData/getAlgorithm()B;
		// 36
		virtualMethodRef InitializedMessageDigest/setInitialDigest([BSS[BSS)V;
		// 37
		virtualMethodRef MessageDigest/getAlgorithm()B;
		// 38
		virtualMethodRef MessageDigest/getLength()B;
		// 39
		virtualMethodRef MessageDigest/doFinal([BSS[BS)S;
		// 40
		virtualMethodRef MessageDigest/reset()V;
	}

	.interface public abstract Key 0 {

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

	}

	.interface public abstract AlgorithmParameterSpec 34 {

	}

	.interface public abstract SecretKey 4 {

		.superInterfaces {
			Key;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

	}

	.interface public abstract DHKey 27 {

		.method public abstract setP([BSS)V 0 {
		}

		.method public abstract setQ([BSS)V 1 {
		}

		.method public abstract setG([BSS)V 2 {
		}

		.method public abstract getP([BS)S 3 {
		}

		.method public abstract getQ([BS)S 4 {
		}

		.method public abstract getG([BS)S 5 {
		}

	}

	.interface public abstract PrivateKey 2 {

		.superInterfaces {
			Key;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

	}

	.interface public abstract PublicKey 3 {

		.superInterfaces {
			Key;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

	}

	.interface public abstract DSAKey 1 {

		.method public abstract getG([BS)S 0 {
		}

		.method public abstract getP([BS)S 1 {
		}

		.method public abstract getQ([BS)S 2 {
		}

		.method public abstract setG([BSS)V 3 {
		}

		.method public abstract setP([BSS)V 4 {
		}

		.method public abstract setQ([BSS)V 5 {
		}

	}

	.interface public abstract DSAPrivateKey 5 {

		.superInterfaces {
			Key;
			PrivateKey;
			DSAKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract getG([BS)S 4 {
		}

		.method public abstract getP([BS)S 5 {
		}

		.method public abstract getQ([BS)S 6 {
		}

		.method public abstract setG([BSS)V 7 {
		}

		.method public abstract setP([BSS)V 8 {
		}

		.method public abstract setQ([BSS)V 9 {
		}

		.method public abstract getX([BS)S 10 {
		}

		.method public abstract setX([BSS)V 11 {
		}

	}

	.interface public abstract DSAPublicKey 6 {

		.superInterfaces {
			Key;
			PublicKey;
			DSAKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract getG([BS)S 4 {
		}

		.method public abstract getP([BS)S 5 {
		}

		.method public abstract getQ([BS)S 6 {
		}

		.method public abstract setG([BSS)V 7 {
		}

		.method public abstract setP([BSS)V 8 {
		}

		.method public abstract setQ([BSS)V 9 {
		}

		.method public abstract getY([BS)S 10 {
		}

		.method public abstract setY([BSS)V 11 {
		}

	}

	.interface public abstract ECKey 17 {

		.method public abstract setFieldFP([BSS)V 0 {
		}

		.method public abstract setFieldF2M(S)V 1 {
		}

		.method public abstract setFieldF2M(SSS)V 2 {
		}

		.method public abstract setA([BSS)V 3 {
		}

		.method public abstract setB([BSS)V 4 {
		}

		.method public abstract setG([BSS)V 5 {
		}

		.method public abstract setR([BSS)V 6 {
		}

		.method public abstract setK(S)V 7 {
		}

		.method public abstract getField([BS)S 8 {
		}

		.method public abstract getA([BS)S 9 {
		}

		.method public abstract getB([BS)S 10 {
		}

		.method public abstract getG([BS)S 11 {
		}

		.method public abstract getR([BS)S 12 {
		}

		.method public abstract getK()S 13 {
		}

		.method public abstract copyDomainParametersFrom(Ljavacard/security/ECKey;)V 14 {
		}

	}

	.interface public abstract ECPrivateKey 18 {

		.superInterfaces {
			Key;
			PrivateKey;
			ECKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setFieldFP([BSS)V 4 {
		}

		.method public abstract setFieldF2M(S)V 5 {
		}

		.method public abstract setFieldF2M(SSS)V 6 {
		}

		.method public abstract setA([BSS)V 7 {
		}

		.method public abstract setB([BSS)V 8 {
		}

		.method public abstract setG([BSS)V 9 {
		}

		.method public abstract setR([BSS)V 10 {
		}

		.method public abstract setK(S)V 11 {
		}

		.method public abstract getField([BS)S 12 {
		}

		.method public abstract getA([BS)S 13 {
		}

		.method public abstract getB([BS)S 14 {
		}

		.method public abstract getG([BS)S 15 {
		}

		.method public abstract getR([BS)S 16 {
		}

		.method public abstract getK()S 17 {
		}

		.method public abstract setS([BSS)V 18 {
		}

		.method public abstract getS([BS)S 19 {
		}

		.method public abstract copyDomainParametersFrom(Ljavacard/security/ECKey;)V 20 {
		}

	}

	.interface public abstract ECPublicKey 19 {

		.superInterfaces {
			Key;
			PublicKey;
			ECKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setFieldFP([BSS)V 4 {
		}

		.method public abstract setFieldF2M(S)V 5 {
		}

		.method public abstract setFieldF2M(SSS)V 6 {
		}

		.method public abstract setA([BSS)V 7 {
		}

		.method public abstract setB([BSS)V 8 {
		}

		.method public abstract setG([BSS)V 9 {
		}

		.method public abstract setR([BSS)V 10 {
		}

		.method public abstract setK(S)V 11 {
		}

		.method public abstract getField([BS)S 12 {
		}

		.method public abstract getA([BS)S 13 {
		}

		.method public abstract getB([BS)S 14 {
		}

		.method public abstract getG([BS)S 15 {
		}

		.method public abstract getR([BS)S 16 {
		}

		.method public abstract getK()S 17 {
		}

		.method public abstract setW([BSS)V 18 {
		}

		.method public abstract getW([BS)S 19 {
		}

		.method public abstract copyDomainParametersFrom(Ljavacard/security/ECKey;)V 20 {
		}

	}

	.interface public abstract GenericSecretKey 35 {

		.superInterfaces {
			Key;
			SecretKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setKey([BSS)V 4 {
		}

		.method public abstract getKey([BS)S 5 {
		}

	}

	.interface public abstract HMACKey 23 {

		.superInterfaces {
			Key;
			SecretKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setKey([BSS)V 4 {
		}

		.method public abstract getKey([BS)B 5 {
		}

	}

	.interface public abstract DESKey 10 {

		.superInterfaces {
			Key;
			SecretKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract getKey([BS)B 4 {
		}

		.method public abstract setKey([BS)V 5 {
		}

	}

	.interface public abstract KoreanSEEDKey 24 {

		.superInterfaces {
			Key;
			SecretKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setKey([BS)V 4 {
		}

		.method public abstract getKey([BS)B 5 {
		}

	}

	.interface public abstract PrimalityTestParamSpec 36 {

		.superInterfaces {
			AlgorithmParameterSpec;
		}

		.fields {
			public static final short MILLER_RABIN_TEST = 1;		// S
			public static final short FERMAT_TEST = 2;		// S
		}

		.method public abstract getType()S 0 {
		}

		.method public abstract getRounds()S 1 {
		}

	}

	.interface public abstract DHPrivateKey 28 {

		.superInterfaces {
			Key;
			PrivateKey;
			DHKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setP([BSS)V 4 {
		}

		.method public abstract setQ([BSS)V 5 {
		}

		.method public abstract setG([BSS)V 6 {
		}

		.method public abstract getP([BS)S 7 {
		}

		.method public abstract getQ([BS)S 8 {
		}

		.method public abstract getG([BS)S 9 {
		}

		.method public abstract setX([BSS)V 10 {
		}

		.method public abstract getX([BS)S 11 {
		}

	}

	.interface public abstract DHPublicKey 29 {

		.superInterfaces {
			Key;
			PublicKey;
			DHKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setP([BSS)V 4 {
		}

		.method public abstract setQ([BSS)V 5 {
		}

		.method public abstract setG([BSS)V 6 {
		}

		.method public abstract getP([BS)S 7 {
		}

		.method public abstract getQ([BS)S 8 {
		}

		.method public abstract getG([BS)S 9 {
		}

		.method public abstract setY([BSS)V 10 {
		}

		.method public abstract getY([BS)S 11 {
		}

	}

	.interface public abstract RSAPrivateCrtKey 7 {

		.superInterfaces {
			Key;
			PrivateKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract getDP1([BS)S 4 {
		}

		.method public abstract getDQ1([BS)S 5 {
		}

		.method public abstract getP([BS)S 6 {
		}

		.method public abstract getPQ([BS)S 7 {
		}

		.method public abstract getQ([BS)S 8 {
		}

		.method public abstract setDP1([BSS)V 9 {
		}

		.method public abstract setDQ1([BSS)V 10 {
		}

		.method public abstract setP([BSS)V 11 {
		}

		.method public abstract setPQ([BSS)V 12 {
		}

		.method public abstract setQ([BSS)V 13 {
		}

	}

	.interface public abstract RSAPrivateKey 8 {

		.superInterfaces {
			Key;
			PrivateKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract getExponent([BS)S 4 {
		}

		.method public abstract getModulus([BS)S 5 {
		}

		.method public abstract setExponent([BSS)V 6 {
		}

		.method public abstract setModulus([BSS)V 7 {
		}

	}

	.interface public abstract RSAPublicKey 9 {

		.superInterfaces {
			Key;
			PublicKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract getExponent([BS)S 4 {
		}

		.method public abstract getModulus([BS)S 5 {
		}

		.method public abstract setExponent([BSS)V 6 {
		}

		.method public abstract setModulus([BSS)V 7 {
		}

	}

	.interface public abstract SM4Key 37 {

		.superInterfaces {
			Key;
			SecretKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setKey([BS)V 4 {
		}

		.method public abstract getKey([BS)B 5 {
		}

	}

	.interface public abstract AESKey 20 {

		.superInterfaces {
			Key;
			SecretKey;
		}

		.method public abstract clearKey()V 0 {
		}

		.method public abstract getSize()S 1 {
		}

		.method public abstract getType()B 2 {
		}

		.method public abstract isInitialized()Z 3 {
		}

		.method public abstract setKey([BS)V 4 {
		}

		.method public abstract getKey([BS)B 5 {
		}

	}

	.interface public abstract SignatureMessageRecovery 25 {

		.method public abstract init(Ljavacard/security/Key;B)V 0 {
		}

		.method public abstract beginVerify([BSS)S 1 {
		}

		.method public abstract sign([BSS[BS[SS)S 2 {
		}

		.method public abstract verify([BSS)Z 3 {
		}

		.method public abstract getAlgorithm()B 4 {
		}

		.method public abstract getLength()S 5 {
		}

		.method public abstract update([BSS)V 6 {
		}

	}

	.interface public abstract XECKey 38 {

		.method public abstract getParams()Ljavacard/security/NamedParameterSpec; 0 {
		}

		.method public abstract getEncodingLength()S 1 {
		}

		.method public abstract getEncoded([BS)S 2 {
		}

		.method public abstract setEncoded([BSS)V 3 {
		}

	}

	.interface public abstract XECPrivateKey 39 {

		.superInterfaces {
			XECKey;
			Key;
			PrivateKey;
		}

		.method public abstract getParams()Ljavacard/security/NamedParameterSpec; 0 {
		}

		.method public abstract getEncodingLength()S 1 {
		}

		.method public abstract getEncoded([BS)S 2 {
		}

		.method public abstract setEncoded([BSS)V 3 {
		}

		.method public abstract clearKey()V 4 {
		}

		.method public abstract getSize()S 5 {
		}

		.method public abstract getType()B 6 {
		}

		.method public abstract isInitialized()Z 7 {
		}

	}

	.interface public abstract XECPublicKey 40 {

		.superInterfaces {
			XECKey;
			Key;
			PublicKey;
		}

		.method public abstract getParams()Ljavacard/security/NamedParameterSpec; 0 {
		}

		.method public abstract getEncodingLength()S 1 {
		}

		.method public abstract getEncoded([BS)S 2 {
		}

		.method public abstract setEncoded([BSS)V 3 {
		}

		.method public abstract clearKey()V 4 {
		}

		.method public abstract getSize()S 5 {
		}

		.method public abstract getType()B 6 {
		}

		.method public abstract isInitialized()Z 7 {
		}

	}

	.class public abstract Checksum 21 extends 0.0 {		// extends java/lang/Object

		.fields {
			public static final byte ALG_ISO3309_CRC16 = 1;		// B
			public static final byte ALG_ISO3309_CRC32 = 2;		// B
		}

		.publicMethodTable 1 5 {
			equals(Ljava/lang/Object;)Z 0;
			init([BSS)V 255;
			getAlgorithm()B 255;
			doFinal([BSS[BS)S 255;
			update([BSS)V 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final getInstance(BZ)Ljavacard/security/Checksum; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method protected <init>()V 1 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					return;
		}

		.method public abstract init([BSS)V 1 {
		}

		.method public abstract getAlgorithm()B 2 {
		}

		.method public abstract doFinal([BSS[BS)S 3 {
		}

		.method public abstract update([BSS)V 4 {
		}

	}

	.class public abstract KeyAgreement 22 extends 0.0 {		// extends java/lang/Object

		.fields {
			public static final byte ALG_EC_SVDP_DH = 1;		// B
			public static final byte ALG_EC_SVDP_DH_KDF = 1;		// B
			public static final byte ALG_EC_SVDP_DHC = 2;		// B
			public static final byte ALG_EC_SVDP_DHC_KDF = 2;		// B
			public static final byte ALG_EC_SVDP_DH_PLAIN = 3;		// B
			public static final byte ALG_EC_SVDP_DHC_PLAIN = 4;		// B
			public static final byte ALG_EC_PACE_GM = 5;		// B
			public static final byte ALG_EC_SVDP_DH_PLAIN_XY = 6;		// B
			public static final byte ALG_DH_PLAIN = 7;		// B
			public static final byte ALG_XDH = 8;		// B
			public static final byte ALG_SM2 = 9;		// B
		}

		.publicMethodTable 1 4 {
			equals(Ljava/lang/Object;)Z 0;
			init(Ljavacard/security/PrivateKey;)V 255;
			getAlgorithm()B 255;
			generateSecret([BSS[BS)S 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final getInstance(BZ)Ljavacard/security/KeyAgreement; 0 {
			.stack 1;
			.locals 0;

				L0:	sload_0;
					slookupswitch L1 0;
				L1:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method protected <init>()V 1 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					return;
		}

		.method public abstract init(Ljavacard/security/PrivateKey;)V 1 {
		}

		.method public abstract getAlgorithm()B 2 {
		}

		.method public abstract generateSecret([BSS[BS)S 3 {
		}

	}

	.class public KeyBuilder 13 extends 0.0 {		// extends java/lang/Object

		.fields {
			public static final byte TYPE_DES_TRANSIENT_RESET = 1;		// B
			public static final byte TYPE_DES_TRANSIENT_DESELECT = 2;		// B
			public static final byte TYPE_DES = 3;		// B
			public static final byte TYPE_RSA_PUBLIC = 4;		// B
			public static final byte TYPE_RSA_PRIVATE = 5;		// B
			public static final byte TYPE_RSA_CRT_PRIVATE = 6;		// B
			public static final byte TYPE_DSA_PUBLIC = 7;		// B
			public static final byte TYPE_DSA_PRIVATE = 8;		// B
			public static final byte TYPE_EC_F2M_PUBLIC = 9;		// B
			public static final byte TYPE_EC_F2M_PRIVATE = 10;		// B
			public static final byte TYPE_EC_FP_PUBLIC = 11;		// B
			public static final byte TYPE_EC_FP_PRIVATE = 12;		// B
			public static final byte TYPE_AES_TRANSIENT_RESET = 13;		// B
			public static final byte TYPE_AES_TRANSIENT_DESELECT = 14;		// B
			public static final byte TYPE_AES = 15;		// B
			public static final byte TYPE_KOREAN_SEED_TRANSIENT_RESET = 16;		// B
			public static final byte TYPE_KOREAN_SEED_TRANSIENT_DESELECT = 17;		// B
			public static final byte TYPE_KOREAN_SEED = 18;		// B
			public static final byte TYPE_HMAC_TRANSIENT_RESET = 19;		// B
			public static final byte TYPE_HMAC_TRANSIENT_DESELECT = 20;		// B
			public static final byte TYPE_HMAC = 21;		// B
			public static final byte TYPE_RSA_PRIVATE_TRANSIENT_RESET = 22;		// B
			public static final byte TYPE_RSA_PRIVATE_TRANSIENT_DESELECT = 23;		// B
			public static final byte TYPE_RSA_CRT_PRIVATE_TRANSIENT_RESET = 24;		// B
			public static final byte TYPE_RSA_CRT_PRIVATE_TRANSIENT_DESELECT = 25;		// B
			public static final byte TYPE_DSA_PRIVATE_TRANSIENT_RESET = 26;		// B
			public static final byte TYPE_DSA_PRIVATE_TRANSIENT_DESELECT = 27;		// B
			public static final byte TYPE_EC_F2M_PRIVATE_TRANSIENT_RESET = 28;		// B
			public static final byte TYPE_EC_F2M_PRIVATE_TRANSIENT_DESELECT = 29;		// B
			public static final byte TYPE_EC_FP_PRIVATE_TRANSIENT_RESET = 30;		// B
			public static final byte TYPE_EC_FP_PRIVATE_TRANSIENT_DESELECT = 31;		// B
			public static final byte TYPE_DH_PUBLIC = 32;		// B
			public static final byte TYPE_DH_PUBLIC_TRANSIENT_DESELECT = 33;		// B
			public static final byte TYPE_DH_PUBLIC_TRANSIENT_RESET = 34;		// B
			public static final byte TYPE_DH_PRIVATE = 35;		// B
			public static final byte TYPE_DH_PRIVATE_TRANSIENT_DESELECT = 36;		// B
			public static final byte TYPE_DH_PRIVATE_TRANSIENT_RESET = 37;		// B
			public static final byte TYPE_DH_PARAMETERS = 38;		// B
			public static final byte TYPE_DSA_PARAMETERS = 39;		// B
			public static final byte TYPE_EC_F2M_PARAMETERS = 40;		// B
			public static final byte TYPE_EC_FP_PARAMETERS = 41;		// B
			public static final byte TYPE_GENERIC_SECRET = 42;		// B
			public static final byte TYPE_SM4 = 43;		// B
			public static final byte TYPE_XEC = -1;		// B
			public static final byte ALG_TYPE_DES = 1;		// B
			public static final byte ALG_TYPE_AES = 2;		// B
			public static final byte ALG_TYPE_DSA_PUBLIC = 3;		// B
			public static final byte ALG_TYPE_DSA_PRIVATE = 4;		// B
			public static final byte ALG_TYPE_EC_F2M_PUBLIC = 5;		// B
			public static final byte ALG_TYPE_EC_F2M_PRIVATE = 6;		// B
			public static final byte ALG_TYPE_EC_FP_PUBLIC = 7;		// B
			public static final byte ALG_TYPE_EC_FP_PRIVATE = 8;		// B
			public static final byte ALG_TYPE_HMAC = 9;		// B
			public static final byte ALG_TYPE_KOREAN_SEED = 10;		// B
			public static final byte ALG_TYPE_RSA_PUBLIC = 11;		// B
			public static final byte ALG_TYPE_RSA_PRIVATE = 12;		// B
			public static final byte ALG_TYPE_RSA_CRT_PRIVATE = 13;		// B
			public static final byte ALG_TYPE_DH_PUBLIC = 14;		// B
			public static final byte ALG_TYPE_DH_PRIVATE = 15;		// B
			public static final byte ALG_TYPE_EC_F2M_PARAMETERS = 16;		// B
			public static final byte ALG_TYPE_EC_FP_PARAMETERS = 17;		// B
			public static final byte ALG_TYPE_DSA_PARAMETERS = 18;		// B
			public static final byte ALG_TYPE_DH_PARAMETERS = 19;		// B
			public static final byte ALG_TYPE_GENERIC_SECRET = 20;		// B
			public static final byte ALG_TYPE_SM4 = 21;		// B
			public static final short LENGTH_DES = 64;		// S
			public static final short LENGTH_DES3_2KEY = 128;		// S
			public static final short LENGTH_DES3_3KEY = 192;		// S
			public static final short LENGTH_RSA_512 = 512;		// S
			public static final short LENGTH_RSA_736 = 736;		// S
			public static final short LENGTH_RSA_768 = 768;		// S
			public static final short LENGTH_RSA_896 = 896;		// S
			public static final short LENGTH_RSA_1024 = 1024;		// S
			public static final short LENGTH_RSA_1280 = 1280;		// S
			public static final short LENGTH_RSA_1536 = 1536;		// S
			public static final short LENGTH_RSA_1984 = 1984;		// S
			public static final short LENGTH_RSA_2048 = 2048;		// S
			public static final short LENGTH_RSA_3072 = 3072;		// S
			public static final short LENGTH_RSA_4096 = 4096;		// S
			public static final short LENGTH_DSA_512 = 512;		// S
			public static final short LENGTH_DSA_768 = 768;		// S
			public static final short LENGTH_DSA_1024 = 1024;		// S
			public static final short LENGTH_EC_FP_112 = 112;		// S
			public static final short LENGTH_EC_F2M_113 = 113;		// S
			public static final short LENGTH_EC_FP_128 = 128;		// S
			public static final short LENGTH_EC_F2M_131 = 131;		// S
			public static final short LENGTH_EC_FP_160 = 160;		// S
			public static final short LENGTH_EC_F2M_163 = 163;		// S
			public static final short LENGTH_EC_FP_192 = 192;		// S
			public static final short LENGTH_EC_F2M_193 = 193;		// S
			public static final short LENGTH_EC_FP_224 = 224;		// S
			public static final short LENGTH_EC_FP_256 = 256;		// S
			public static final short LENGTH_EC_FP_384 = 384;		// S
			public static final short LENGTH_EC_FP_521 = 521;		// S
			public static final short LENGTH_AES_128 = 128;		// S
			public static final short LENGTH_AES_192 = 192;		// S
			public static final short LENGTH_AES_256 = 256;		// S
			public static final short LENGTH_AES_512 = 512;		// S
			public static final short LENGTH_KOREAN_SEED_128 = 128;		// S
			public static final short LENGTH_HMAC_SHA_1_BLOCK_64 = 64;		// S
			public static final short LENGTH_HMAC_SHA_256_BLOCK_64 = 64;		// S
			public static final short LENGTH_HMAC_SHA_384_BLOCK_128 = 128;		// S
			public static final short LENGTH_HMAC_SHA_512_BLOCK_128 = 128;		// S
			public static final short LENGTH_DH_1024 = 1024;		// S
			public static final short LENGTH_DH_2048 = 2048;		// S
			public static final short LENGTH_SM4 = 128;		// S
			public static final short ATTR_PUBLIC = 0;		// S
			public static final short ATTR_PRIVATE = -32768;		// S
		}

		.publicMethodTable 1 1 {
			equals(Ljava/lang/Object;)Z 0;
		}

		.packageMethodTable 0 {
		}

		.method private <init>()V {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					return;
		}

		.method public static buildKey(BSZ)Ljavacard/security/Key; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public static buildXECKey(Ljavacard/security/NamedParameterSpec;SZ)Ljavacard/security/Key; 3 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public static buildKey(BBSZ)Ljavacard/security/Key; 1 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public static getMemoryType(Ljavacard/security/Key;)B 4 {
			.stack 1;
			.locals 0;

				L0:	sconst_0;
					sreturn;
		}

		.method public static buildKeyWithSharedDomain(BBLjavacard/security/Key;Z)Ljavacard/security/Key; 2 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

	}

	.class public final KeyPair 16 extends 0.0 {		// extends java/lang/Object

		.fields {
			private PrivateKey privateKey 0;		// Ljavacard/security/PrivateKey;
			private PublicKey publicKey 1;		// Ljavacard/security/PublicKey;
			public static final byte ALG_RSA = 1;		// B
			public static final byte ALG_RSA_CRT = 2;		// B
			public static final byte ALG_DSA = 3;		// B
			public static final byte ALG_EC_F2M = 4;		// B
			public static final byte ALG_EC_FP = 5;		// B
			public static final byte ALG_DH = 6;		// B
		}

		.publicMethodTable 1 5 {
			equals(Ljava/lang/Object;)Z 0;
			genKeyPair()V 255;
			getPrivate()Ljavacard/security/PrivateKey; 255;
			getPublic()Ljavacard/security/PublicKey; 255;
			genKeyPair(Ljavacard/security/AlgorithmParameterSpec;)V 255;
		}

		.packageMethodTable 0 {
		}

		.method public final genKeyPair()V 1 {
			.stack 0;
			.locals 0;

				L0:	return;
		}

		.method public final genKeyPair(Ljavacard/security/AlgorithmParameterSpec;)V 4 {
			.stack 0;
			.locals 0;

				L0:	return;
		}

		.method public <init>(BS)V 0 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					return;
		}

		.method public <init>(Ljavacard/security/PublicKey;Ljavacard/security/PrivateKey;)V 1 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					return;
		}

		.method public getPublic()Ljavacard/security/PublicKey; 3 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 0;		// reference javacard/security/KeyPair.publicKey
					areturn;
		}

		.method public getPrivate()Ljavacard/security/PrivateKey; 2 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 1;		// reference javacard/security/KeyPair.privateKey
					areturn;
		}

	}

	.class public abstract RandomData 14 extends 0.0 {		// extends java/lang/Object

		.fields {
			public static final byte ALG_PSEUDO_RANDOM = 1;		// B
			public static final byte ALG_SECURE_RANDOM = 2;		// B
			public static final byte ALG_TRNG = 3;		// B
			public static final byte ALG_PRESEEDED_DRBG = 4;		// B
			public static final byte ALG_FAST = 5;		// B
			public static final byte ALG_KEYGENERATION = 6;		// B
		}

		.publicMethodTable 1 5 {
			equals(Ljava/lang/Object;)Z 0;
			generateData([BSS)V 255;
			setSeed([BSS)V 255;
			nextBytes([BSS)S 255;
			getAlgorithm()B 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final getInstance(B)Ljavacard/security/RandomData; 0 {
			.stack 1;
			.locals 0;

				L0:	sload_0;
					stableswitch L1 1 4 L1 L1 L1 L1;
				L1:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method protected <init>()V 1 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					return;
		}

		.method public abstract generateData([BSS)V 1 {
		}

		.method public abstract nextBytes([BSS)S 3 {
		}

		.method public abstract setSeed([BSS)V 2 {
		}

		.method public abstract getAlgorithm()B 4 {
		}

	}

	.class public final RandomData$OneShot 32 extends RandomData {

		.fields {
			private final RandomData actual 0;		// Ljavacard/security/RandomData;
		}

		.publicMethodTable 1 6 {
			equals(Ljava/lang/Object;)Z 0;
			generateData([BSS)V 1;
			setSeed([BSS)V 2;
			nextBytes([BSS)S 3;
			getAlgorithm()B 4;
			close()V 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final open(B)Ljavacard/security/RandomData$OneShot; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method private <init>(Ljavacard/security/RandomData;)V {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					invokespecial 28;		// javacard/security/RandomData.<init>()V
					aload_1;
					putfield_a_this 2;		// reference javacard/security/RandomData$OneShot.actual
					return;
		}

		.method public close()V 5 {
			.stack 0;
			.locals 0;

				L0:	return;
		}

		.method public getAlgorithm()B 4 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 2;		// reference javacard/security/RandomData$OneShot.actual
					invokevirtual 35;		// getAlgorithm()B
					sreturn;
		}

		.method public generateData([BSS)V 1 {
			.stack 4;
			.locals 0;

				L0:	getfield_a_this 2;		// reference javacard/security/RandomData$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					invokevirtual 7;		// generateData([BSS)V
					return;
		}

		.method public nextBytes([BSS)S 3 {
			.stack 4;
			.locals 0;

				L0:	getfield_a_this 2;		// reference javacard/security/RandomData$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					invokevirtual 8;		// nextBytes([BSS)S
					sreturn;
		}

		.method public setSeed([BSS)V 2 {
			.stack 4;
			.locals 0;

				L0:	getfield_a_this 2;		// reference javacard/security/RandomData$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					invokevirtual 9;		// setSeed([BSS)V
					return;
		}

	}

	.class public CryptoException 12 extends 1.5 {		// extends javacard/framework/CardRuntimeException

		.fields {
			public static final short ILLEGAL_VALUE = 1;		// S
			public static final short UNINITIALIZED_KEY = 2;		// S
			public static final short NO_SUCH_ALGORITHM = 3;		// S
			public static final short INVALID_INIT = 4;		// S
			public static final short ILLEGAL_USE = 5;		// S
			private static CryptoException systemInstance;		// Ljavacard/security/CryptoException;
		}

		.publicMethodTable 3 3 {
			equals(Ljava/lang/Object;)Z 0;
			getReason()S 1;
			setReason(S)V 2;
		}

		.packageMethodTable 0 {
		}

		.method public <init>(S)V 0 {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					sload_1;
					invokespecial 10;		// javacard/framework/CardRuntimeException.<init>(S)V
					getstatic_a 11;		// reference javacard/security/CryptoException.systemInstance
					ifnonnull L2;
				L1:	aload_0;
					putstatic_a 11;		// reference javacard/security/CryptoException.systemInstance
				L2:	return;
		}

		.method public static throwIt(S)V 1 {
			.stack 2;
			.locals 0;

				L0:	getstatic_a 11;		// reference javacard/security/CryptoException.systemInstance
					sload_0;
					invokevirtual 12;		// setReason(S)V
					getstatic_a 11;		// reference javacard/security/CryptoException.systemInstance
					athrow;
		}

	}

	.class public abstract MessageDigest 11 extends 0.0 {		// extends java/lang/Object

		.fields {
			public static final byte ALG_NULL = 0;		// B
			public static final byte ALG_SHA = 1;		// B
			public static final byte ALG_MD5 = 2;		// B
			public static final byte ALG_RIPEMD160 = 3;		// B
			public static final byte ALG_SHA_256 = 4;		// B
			public static final byte ALG_SHA_384 = 5;		// B
			public static final byte ALG_SHA_512 = 6;		// B
			public static final byte ALG_SHA_224 = 7;		// B
			public static final byte ALG_SHA3_224 = 8;		// B
			public static final byte ALG_SHA3_256 = 9;		// B
			public static final byte ALG_SHA3_384 = 10;		// B
			public static final byte ALG_SHA3_512 = 11;		// B
			public static final byte ALG_SM3 = 12;		// B
			public static final byte LENGTH_MD5 = 16;		// B
			public static final byte LENGTH_RIPEMD160 = 20;		// B
			public static final byte LENGTH_SHA = 20;		// B
			public static final byte LENGTH_SHA_224 = 28;		// B
			public static final byte LENGTH_SHA_256 = 32;		// B
			public static final byte LENGTH_SHA_384 = 48;		// B
			public static final byte LENGTH_SHA_512 = 64;		// B
			public static final byte LENGTH_SHA3_224 = 28;		// B
			public static final byte LENGTH_SHA3_256 = 32;		// B
			public static final byte LENGTH_SHA3_384 = 48;		// B
			public static final byte LENGTH_SHA3_512 = 64;		// B
			public static final byte LENGTH_SM3 = 32;		// B
		}

		.publicMethodTable 1 6 {
			equals(Ljava/lang/Object;)Z 0;
			doFinal([BSS[BS)S 255;
			getAlgorithm()B 255;
			getLength()B 255;
			reset()V 255;
			update([BSS)V 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final getInstance(BZ)Ljavacard/security/MessageDigest; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public static final getInitializedMessageDigestInstance(BZ)Ljavacard/security/InitializedMessageDigest; 2 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method protected <init>()V 1 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					return;
		}

		.method public abstract getAlgorithm()B 2 {
		}

		.method public abstract getLength()B 3 {
		}

		.method public abstract doFinal([BSS[BS)S 1 {
		}

		.method public abstract update([BSS)V 5 {
		}

		.method public abstract reset()V 4 {
		}

	}

	.class public abstract Signature 15 extends 0.0 {		// extends java/lang/Object

		.fields {
			public static final byte ALG_DES_MAC4_NOPAD = 1;		// B
			public static final byte ALG_DES_MAC8_NOPAD = 2;		// B
			public static final byte ALG_DES_MAC4_ISO9797_M1 = 3;		// B
			public static final byte ALG_DES_MAC8_ISO9797_M1 = 4;		// B
			public static final byte ALG_DES_MAC4_ISO9797_M2 = 5;		// B
			public static final byte ALG_DES_MAC8_ISO9797_M2 = 6;		// B
			public static final byte ALG_DES_MAC4_PKCS5 = 7;		// B
			public static final byte ALG_DES_MAC8_PKCS5 = 8;		// B
			public static final byte ALG_RSA_SHA_ISO9796 = 9;		// B
			public static final byte ALG_RSA_SHA_PKCS1 = 10;		// B
			public static final byte ALG_RSA_MD5_PKCS1 = 11;		// B
			public static final byte ALG_RSA_RIPEMD160_ISO9796 = 12;		// B
			public static final byte ALG_RSA_RIPEMD160_PKCS1 = 13;		// B
			public static final byte ALG_DSA_SHA = 14;		// B
			public static final byte ALG_RSA_SHA_RFC2409 = 15;		// B
			public static final byte ALG_RSA_MD5_RFC2409 = 16;		// B
			public static final byte ALG_ECDSA_SHA = 17;		// B
			public static final byte ALG_AES_MAC_128_NOPAD = 18;		// B
			public static final byte ALG_AES_CMAC_128 = 49;		// B
			public static final byte ALG_DES_MAC4_ISO9797_1_M2_ALG3 = 19;		// B
			public static final byte ALG_DES_MAC8_ISO9797_1_M2_ALG3 = 20;		// B
			public static final byte ALG_RSA_SHA_PKCS1_PSS = 21;		// B
			public static final byte ALG_RSA_MD5_PKCS1_PSS = 22;		// B
			public static final byte ALG_RSA_RIPEMD160_PKCS1_PSS = 23;		// B
			public static final byte ALG_HMAC_SHA1 = 24;		// B
			public static final byte ALG_HMAC_SHA_256 = 25;		// B
			public static final byte ALG_HMAC_SHA_384 = 26;		// B
			public static final byte ALG_HMAC_SHA_512 = 27;		// B
			public static final byte ALG_HMAC_MD5 = 28;		// B
			public static final byte ALG_HMAC_RIPEMD160 = 29;		// B
			public static final byte ALG_RSA_SHA_ISO9796_MR = 30;		// B
			public static final byte ALG_RSA_RIPEMD160_ISO9796_MR = 31;		// B
			public static final byte ALG_KOREAN_SEED_MAC_NOPAD = 32;		// B
			public static final byte ALG_ECDSA_SHA_256 = 33;		// B
			public static final byte ALG_ECDSA_SHA_384 = 34;		// B
			public static final byte ALG_AES_MAC_192_NOPAD = 35;		// B
			public static final byte ALG_AES_MAC_256_NOPAD = 36;		// B
			public static final byte ALG_ECDSA_SHA_224 = 37;		// B
			public static final byte ALG_ECDSA_SHA_512 = 38;		// B
			public static final byte ALG_RSA_SHA_224_PKCS1 = 39;		// B
			public static final byte ALG_RSA_SHA_256_PKCS1 = 40;		// B
			public static final byte ALG_RSA_SHA_384_PKCS1 = 41;		// B
			public static final byte ALG_RSA_SHA_512_PKCS1 = 42;		// B
			public static final byte ALG_RSA_SHA_224_PKCS1_PSS = 43;		// B
			public static final byte ALG_RSA_SHA_256_PKCS1_PSS = 44;		// B
			public static final byte ALG_RSA_SHA_384_PKCS1_PSS = 45;		// B
			public static final byte ALG_RSA_SHA_512_PKCS1_PSS = 46;		// B
			public static final byte ALG_DES_MAC4_ISO9797_1_M1_ALG3 = 47;		// B
			public static final byte ALG_DES_MAC8_ISO9797_1_M1_ALG3 = 48;		// B
			public static final byte SIG_CIPHER_DES_MAC4 = 1;		// B
			public static final byte SIG_CIPHER_DES_MAC8 = 2;		// B
			public static final byte SIG_CIPHER_RSA = 3;		// B
			public static final byte SIG_CIPHER_DSA = 4;		// B
			public static final byte SIG_CIPHER_ECDSA = 5;		// B
			public static final byte SIG_CIPHER_ECDSA_PLAIN = 9;		// B
			public static final byte SIG_CIPHER_AES_MAC128 = 6;		// B
			public static final byte SIG_CIPHER_AES_CMAC128 = 10;		// B
			public static final byte SIG_CIPHER_HMAC = 7;		// B
			public static final byte SIG_CIPHER_KOREAN_SEED_MAC = 8;		// B
			public static final byte SIG_CIPHER_SM2 = 11;		// B
			public static final byte SIG_CIPHER_SM4_MAC128 = 12;		// B
			public static final byte SIG_CIPHER_EDDSA = 13;		// B
			public static final byte SIG_CIPHER_EDDSAPH = 14;		// B
			public static final byte MODE_SIGN = 1;		// B
			public static final byte MODE_VERIFY = 2;		// B
		}

		.publicMethodTable 1 14 {
			equals(Ljava/lang/Object;)Z 0;
			getAlgorithm()B 255;
			getLength()S 255;
			init(Ljavacard/security/Key;B)V 255;
			init(Ljavacard/security/Key;B[BSS)V 255;
			sign([BSS[BS)S 255;
			update([BSS)V 255;
			verify([BSS[BSS)Z 255;
			setInitialDigest([BSS[BSS)V 255;
			signPreComputedHash([BSS[BS)S 255;
			verifyPreComputedHash([BSS[BSS)Z 255;
			getMessageDigestAlgorithm()B 255;
			getCipherAlgorithm()B 255;
			getPaddingAlgorithm()B 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final getInstance(BZ)Ljavacard/security/Signature; 0 {
			.stack 1;
			.locals 0;

				L0:	sload_0;
					slookupswitch L1 0;
				L1:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public static final getInstance(BBBZ)Ljavacard/security/Signature; 2 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method protected <init>()V 1 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					return;
		}

		.method public abstract init(Ljavacard/security/Key;B)V 3 {
		}

		.method public abstract init(Ljavacard/security/Key;B[BSS)V 4 {
		}

		.method public abstract setInitialDigest([BSS[BSS)V 8 {
		}

		.method public abstract getAlgorithm()B 1 {
		}

		.method public abstract getMessageDigestAlgorithm()B 11 {
		}

		.method public abstract getCipherAlgorithm()B 12 {
		}

		.method public abstract getPaddingAlgorithm()B 13 {
		}

		.method public abstract getLength()S 2 {
		}

		.method public abstract update([BSS)V 6 {
		}

		.method public abstract sign([BSS[BS)S 5 {
		}

		.method public abstract signPreComputedHash([BSS[BS)S 9 {
		}

		.method public abstract verify([BSS[BSS)Z 7 {
		}

		.method public abstract verifyPreComputedHash([BSS[BSS)Z 10 {
		}

	}

	.class public final Signature$OneShot 33 extends Signature {

		.fields {
			private final Signature actual 0;		// Ljavacard/security/Signature;
		}

		.publicMethodTable 1 15 {
			equals(Ljava/lang/Object;)Z 0;
			getAlgorithm()B 1;
			getLength()S 2;
			init(Ljavacard/security/Key;B)V 3;
			init(Ljavacard/security/Key;B[BSS)V 4;
			sign([BSS[BS)S 5;
			update([BSS)V 6;
			verify([BSS[BSS)Z 7;
			setInitialDigest([BSS[BSS)V 8;
			signPreComputedHash([BSS[BS)S 9;
			verifyPreComputedHash([BSS[BSS)Z 10;
			getMessageDigestAlgorithm()B 11;
			getCipherAlgorithm()B 12;
			getPaddingAlgorithm()B 13;
			close()V 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final open(BBB)Ljavacard/security/Signature$OneShot; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public final update([BSS)V 6 {
			.stack 1;
			.locals 0;

				L0:	sconst_5;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					return;
		}

		.method private <init>(Ljavacard/security/Signature;)V {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					invokespecial 13;		// javacard/security/Signature.<init>()V
					aload_1;
					putfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					return;
		}

		.method public close()V 14 {
			.stack 0;
			.locals 0;

				L0:	return;
		}

		.method public init(Ljavacard/security/Key;B)V 3 {
			.stack 3;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					invokevirtual 15;		// init(Ljavacard/security/Key;B)V
					return;
		}

		.method public init(Ljavacard/security/Key;B[BSS)V 4 {
			.stack 6;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					aload_3;
					sload 4;
					sload 5;
					invokevirtual 16;		// init(Ljavacard/security/Key;B[BSS)V
					return;
		}

		.method public setInitialDigest([BSS[BSS)V 8 {
			.stack 7;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					sload 6;
					invokevirtual 17;		// setInitialDigest([BSS[BSS)V
					return;
		}

		.method public getAlgorithm()B 1 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					invokevirtual 18;		// getAlgorithm()B
					sreturn;
		}

		.method public getMessageDigestAlgorithm()B 11 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					invokevirtual 19;		// getMessageDigestAlgorithm()B
					sreturn;
		}

		.method public getCipherAlgorithm()B 12 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					invokevirtual 20;		// getCipherAlgorithm()B
					sreturn;
		}

		.method public getPaddingAlgorithm()B 13 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					invokevirtual 21;		// getPaddingAlgorithm()B
					sreturn;
		}

		.method public getLength()S 2 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					invokevirtual 22;		// getLength()S
					sreturn;
		}

		.method public sign([BSS[BS)S 5 {
			.stack 6;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					invokevirtual 23;		// sign([BSS[BS)S
					sreturn;
		}

		.method public signPreComputedHash([BSS[BS)S 9 {
			.stack 6;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					invokevirtual 24;		// signPreComputedHash([BSS[BS)S
					sreturn;
		}

		.method public verify([BSS[BSS)Z 7 {
			.stack 7;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					sload 6;
					invokevirtual 25;		// verify([BSS[BSS)Z
					sreturn;
		}

		.method public verifyPreComputedHash([BSS[BSS)Z 10 {
			.stack 7;
			.locals 0;

				L0:	getfield_a_this 3;		// reference javacard/security/Signature$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					sload 6;
					invokevirtual 26;		// verifyPreComputedHash([BSS[BSS)Z
					sreturn;
		}

	}

	.class public final MessageDigest$OneShot 30 extends MessageDigest {

		.fields {
			private final MessageDigest actual 0;		// Ljavacard/security/MessageDigest;
		}

		.publicMethodTable 1 7 {
			equals(Ljava/lang/Object;)Z 0;
			doFinal([BSS[BS)S 1;
			getAlgorithm()B 2;
			getLength()B 3;
			reset()V 4;
			update([BSS)V 5;
			close()V 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final open(B)Ljavacard/security/MessageDigest$OneShot; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method private <init>(Ljavacard/security/MessageDigest;)V {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					invokespecial 27;		// javacard/security/MessageDigest.<init>()V
					aload_1;
					putfield_a_this 4;		// reference javacard/security/MessageDigest$OneShot.actual
					return;
		}

		.method public close()V 6 {
			.stack 0;
			.locals 0;

				L0:	return;
		}

		.method public getAlgorithm()B 2 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 4;		// reference javacard/security/MessageDigest$OneShot.actual
					invokevirtual 29;		// getAlgorithm()B
					sreturn;
		}

		.method public getLength()B 3 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 4;		// reference javacard/security/MessageDigest$OneShot.actual
					invokevirtual 30;		// getLength()B
					sreturn;
		}

		.method public doFinal([BSS[BS)S 1 {
			.stack 6;
			.locals 0;

				L0:	getfield_a_this 4;		// reference javacard/security/MessageDigest$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					invokevirtual 31;		// doFinal([BSS[BS)S
					sreturn;
		}

		.method public update([BSS)V 5 {
			.stack 1;
			.locals 0;

				L0:	sconst_5;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					return;
		}

		.method public reset()V 4 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 4;		// reference javacard/security/MessageDigest$OneShot.actual
					invokevirtual 32;		// reset()V
					return;
		}

	}

	.class public NamedParameterSpec 41 extends 0.0 {		// extends java/lang/Object

		.fields {
			private final short name 0;		// S
			public static final short ED25519 = 257;		// S
			public static final short ED448 = 514;		// S
			public static final short X25519 = 259;		// S
			public static final short X448 = 516;		// S
			public static final short FRP256V1 = 1025;		// S
			public static final short SM2 = 768;		// S
			public static final short SECP192R1 = 4097;		// S
			public static final short SECP224R1 = 4098;		// S
			public static final short SECP256R1 = 4099;		// S
			public static final short SECP384R1 = 4100;		// S
			public static final short SECP521R1 = 4101;		// S
			public static final short BRAINPOOLP192R1 = 8195;		// S
			public static final short BRAINPOOLP192T1 = 8196;		// S
			public static final short BRAINPOOLP224R1 = 8197;		// S
			public static final short BRAINPOOLP224T1 = 8198;		// S
			public static final short BRAINPOOLP256R1 = 8199;		// S
			public static final short BRAINPOOLP256T1 = 8200;		// S
			public static final short BRAINPOOLP320R1 = 8201;		// S
			public static final short BRAINPOOLP320T1 = 8202;		// S
			public static final short BRAINPOOLP384R1 = 8203;		// S
			public static final short BRAINPOOLP384T1 = 8204;		// S
			public static final short BRAINPOOLP512R1 = 8205;		// S
			public static final short BRAINPOOLP512T1 = 8206;		// S
			private static final short SECP = 4096;		// S
			private static final short BRAINPOOL = 8192;		// S
			private static final short CURVE25519 = 256;		// S
			private static final short CURVE448 = 512;		// S
			private static final short CURVESM2 = 768;		// S
			private static final short ANSSIFRP = 1024;		// S
		}

		.publicMethodTable 1 2 {
			equals(Ljava/lang/Object;)Z 0;
			getName()S 255;
		}

		.packageMethodTable 0 {
		}

		.implementedInterfaceInfoTable { 
			.interface AlgorithmParameterSpec { 
			}

		}

		.method public static final getInstance(S)Ljavacard/security/NamedParameterSpec; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method public final getName()S 1 {
			.stack 1;
			.locals 0;

				L0:	getfield_s_this 5;		// short javacard/security/NamedParameterSpec.name
					sreturn;
		}

		.method private <init>(S)V {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					invokespecial 14;		// java/lang/Object.<init>()V
					sload_1;
					putfield_s_this 5;		// short javacard/security/NamedParameterSpec.name
					return;
		}

	}

	.class public abstract InitializedMessageDigest 26 extends MessageDigest {

		.publicMethodTable 6 7 {
			equals(Ljava/lang/Object;)Z 0;
			doFinal([BSS[BS)S 1;
			getAlgorithm()B 2;
			getLength()B 3;
			reset()V 4;
			update([BSS)V 5;
			setInitialDigest([BSS[BSS)V 255;
		}

		.packageMethodTable 0 {
		}

		.method protected <init>()V 0 {
			.stack 1;
			.locals 0;

				L0:	aload_0;
					invokespecial 27;		// javacard/security/MessageDigest.<init>()V
					return;
		}

		.method public abstract setInitialDigest([BSS[BSS)V 6 {
		}

	}

	.class public final InitializedMessageDigest$OneShot 31 extends InitializedMessageDigest {

		.fields {
			private final InitializedMessageDigest actual 0;		// Ljavacard/security/InitializedMessageDigest;
		}

		.publicMethodTable 1 8 {
			equals(Ljava/lang/Object;)Z 0;
			doFinal([BSS[BS)S 1;
			getAlgorithm()B 2;
			getLength()B 3;
			reset()V 4;
			update([BSS)V 5;
			setInitialDigest([BSS[BSS)V 6;
			close()V 255;
		}

		.packageMethodTable 0 {
		}

		.method public static final open(B)Ljavacard/security/InitializedMessageDigest$OneShot; 0 {
			.stack 1;
			.locals 0;

				L0:	sconst_3;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					aconst_null;
					areturn;
		}

		.method private <init>(Ljavacard/security/InitializedMessageDigest;)V {
			.stack 2;
			.locals 0;

				L0:	aload_0;
					invokespecial 34;		// javacard/security/InitializedMessageDigest.<init>()V
					aload_1;
					putfield_a_this 6;		// reference javacard/security/InitializedMessageDigest$OneShot.actual
					return;
		}

		.method public close()V 7 {
			.stack 0;
			.locals 0;

				L0:	return;
		}

		.method public setInitialDigest([BSS[BSS)V 6 {
			.stack 7;
			.locals 0;

				L0:	getfield_a_this 6;		// reference javacard/security/InitializedMessageDigest$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					sload 6;
					invokevirtual 36;		// setInitialDigest([BSS[BSS)V
					return;
		}

		.method public getAlgorithm()B 2 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 6;		// reference javacard/security/InitializedMessageDigest$OneShot.actual
					invokevirtual 37;		// getAlgorithm()B
					sreturn;
		}

		.method public getLength()B 3 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 6;		// reference javacard/security/InitializedMessageDigest$OneShot.actual
					invokevirtual 38;		// getLength()B
					sreturn;
		}

		.method public doFinal([BSS[BS)S 1 {
			.stack 6;
			.locals 0;

				L0:	getfield_a_this 6;		// reference javacard/security/InitializedMessageDigest$OneShot.actual
					aload_1;
					sload_2;
					sload_3;
					aload 4;
					sload 5;
					invokevirtual 39;		// doFinal([BSS[BS)S
					sreturn;
		}

		.method public update([BSS)V 5 {
			.stack 1;
			.locals 0;

				L0:	sconst_5;
					invokestatic 33;		// javacard/security/CryptoException.throwIt(S)V
					return;
		}

		.method public reset()V 4 {
			.stack 1;
			.locals 0;

				L0:	getfield_a_this 6;		// reference javacard/security/InitializedMessageDigest$OneShot.actual
					invokevirtual 40;		// reset()V
					return;
		}

	}

}
